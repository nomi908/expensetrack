import 'package:expense_track/providers/expensepage_provider.dart';
import 'package:expense_track/providers/transaction_provider.dart';
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';

class Addtransactions extends StatefulWidget {
  final String? amount;
  final String? category;
  final String? description;
  final DateTime? dateTime;
  final String? transactionType;
  final bool isUpdate;
  final String? docId;

  Addtransactions({
    super.key,
    this.amount,
    this.category,
    this.description,
    this.dateTime,
    this.transactionType,
    this.isUpdate = false,
    this.docId,
  });

  @override
  _AddTransactionsState createState() => _AddTransactionsState();
}

class _AddTransactionsState extends State<Addtransactions> {
  final TextEditingController _amountController = TextEditingController();
  final TextEditingController _categoryController = TextEditingController();
  final TextEditingController _descriptionController = TextEditingController();

  @override
  void initState() {
    super.initState();
    if (widget.isUpdate) {
      _amountController.text = widget.amount ?? '';
      _categoryController.text = widget.category ?? '';
      _descriptionController.text = widget.description ?? '';
      context.read<TransactionProvider>().setSelecteddateTime(widget.dateTime!);
      context.read<TransactionProvider>().setTransactionType(widget.transactionType!);
      context.read<TransactionProvider>().setCurrentDocId(widget.docId!);
    } else {
      context.read<TransactionProvider>().resetinputs();
    }
  }

  @override
  void dispose() {
    _amountController.dispose();
    _categoryController.dispose();
    _descriptionController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text(widget.isUpdate ? 'Update Transaction' : 'Add Transaction'),
      ),
      body: SingleChildScrollView(
        child: Container(
          padding: EdgeInsets.all(16),
          margin: EdgeInsets.only(top: 30),
          child: Consumer<TransactionProvider>(
            builder: (context, provider, _) {
              return Column(
                children: [
                  _textFieldWidget("Enter Amount", context, (value) {
                    provider.setAmount(value);
                  }, 1, TextInputType.number, _amountController),
                  const SizedBox(height: 15),
                  _textFieldWidget("Enter Category e.g shopping", context, (value) {
                    provider.setCategory(value);
                  }, 1, TextInputType.text, _categoryController),
                  const SizedBox(height: 15),
                  _textFieldWidget("Enter Description", context, (value) {
                    provider.setDescription(value);
                  }, 4, TextInputType.text, _descriptionController),
                  const SizedBox(height: 15),
                  Row(
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: [
                      Radio(
                        value: 'Income',
                        groupValue: provider.transactionType,
                        onChanged: (value) {
                          if (value != null) {
                            provider.setTransactionType(value);
                          }
                        },
                      ),
                      Text('Income'),
                      SizedBox(width: 20),
                      Radio(
                        value: 'Expense',
                        groupValue: provider.transactionType,
                        onChanged: (value) {
                          if (value != null) {
                            provider.setTransactionType(value);
                          }
                        },
                      ),
                      Text('Expense'),
                    ],
                  ),
                  const SizedBox(height: 15),
                  Container(
                    padding: const EdgeInsets.all(8.0),
                    width: double.infinity,
                    decoration: BoxDecoration(
                      border: Border.all(color: Colors.grey, width: 1.0),
                      borderRadius: BorderRadius.circular(8.0),
                    ),
                    child: InkWell(
                      onTap: () async {
                        await provider.openDatePicker(context);
                      },
                      child: Row(
                        children: [
                          Icon(Icons.calendar_month),
                          SizedBox(width: 10),
                          Text(
                            provider.selecteddateTime != null
                                ? '${provider.selecteddateTime!.day}/'
                                '${provider.selecteddateTime!.month}/${provider.selecteddateTime!.year} '
                                '${provider.selecteddateTime!.hour}:${provider.selecteddateTime!.minute}'
                                : 'Select Date & Time',
                            style: TextStyle(fontSize: 16.0, color: Colors.black),
                          ),
                        ],
                      ),
                    ),
                  ),
                  const SizedBox(height: 30),
                  Container(
                    width: double.infinity,
                    height: 50,
                    child: provider.isLoadingState
                        ? Center(child: CircularProgressIndicator())
                        : ElevatedButton(
                      onPressed: () async {
                        if (provider.amount.isEmpty ||
                            provider.category.isEmpty ||
                            provider.description.isEmpty ||
                            provider.selecteddateTime == null) {
                          ScaffoldMessenger.of(context).showSnackBar(
                            const SnackBar(content: Text('Please fill all the fields')),
                          );
                        } else {
                          Map<String, dynamic> transactionData = {
                            'amount': provider.amount,
                            'category': provider.category,
                            'description': provider.description,
                            'dateTime': provider.selecteddateTime,
                          };

                          if (widget.isUpdate) {
                            await provider.updateTransaction(transactionData);
                          } else {
                            await provider.addTransaction(transactionData);
                          }

                          context.read<ExpensePageProvider>().getallTransaction();
                          Navigator.pop(context);
                          ScaffoldMessenger.of(context).showSnackBar(
                            SnackBar(content: Text('Transaction Successful')),
                          );
                        }
                      },
                      child: Text(
                        widget.isUpdate ? 'Update Transaction' : 'Add Transaction',
                        style: TextStyle(color: Colors.white),
                      ),
                      style: ElevatedButton.styleFrom(backgroundColor: Colors.purple),
                    ),
                  ),
                ],
              );
            },
          ),
        ),
      ),
    );
  }

  Widget _textFieldWidget(
      String labelText,
      BuildContext context,
      Function(String) onChanged,
      int maxLines,
      TextInputType textInputType,
      TextEditingController? controller,
      ) {
    return TextField(
      maxLines: maxLines,
      keyboardType: textInputType,
      controller: controller,
      decoration: InputDecoration(
        label: Text(labelText),
        hintText: labelText,
        alignLabelWithHint: true,
        border: OutlineInputBorder(
          borderRadius: BorderRadius.circular(10),
        ),
        focusedBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(10),
          borderSide: BorderSide(color: Colors.purple, width: 2.0),
        ),
        enabledBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(10),
          borderSide: BorderSide(color: Colors.grey, width: 2.0),
        ),
      ),
      onChanged: onChanged,
    );
  }
}
